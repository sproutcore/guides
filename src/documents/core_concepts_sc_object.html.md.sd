---
layout: default
sc_category: Start Here
sc_order: 40
sc_title: Classes and SC.Object
sc_description: The guide covers some of the core concepts of object-oriented programming with the SproutCore framework. By referring to this guide, you will be able to:
sc_list:
  - Understand how Classes work, including SC.Object.
  - Write your own subclasses based on SC.Object.
  - Create mixins to share functionality between Classes.
  - Add Class properties and functions
---


### SC.Object

SproutCore uses a traditional class-based [object-oriented
programming](http://en.wikipedia.org/wiki/Object-oriented_programming) style
based on the +SC.Object+ Class. In this style, <code>SC.Object</code> becomes
the base for all "Classes" in SproutCore and provides powerful extensions to
regular JavaScript objects. These extensions include computed properties,
automatic bindings, observers and more, which will be described in detail below.

#### Creating an SC.Object Instance

Creation of an <code>SC.Object</code> instance is straightforward.

```javascript
var obj = SC.Object.create()
```

In most cases you will want to create your <code>SC.Object</code> with some pre-
set properties. You accomplish this by providing the properties in a hash.  The
following example creates a new SC.Object to represent a person.

```javascript
// Create an SC.Object to represent a person.
var person = SC.Object.create({
  firstName: 'Peter',
  lastName:  'Wagenet'
});

// Access our object's properties
person.get('firstName'); // 'Peter'
person.get('lastName');  // 'Wagenet'
```

NOTE: The +get()+ and +set()+ functions allow for Key-Value observing which is
described in more detail below. For now, trust that they are important and you
should make a habit of always using them to access properties on SC.Object and
its subclasses.

#### Creating an SC.Object Subclass

In many cases you will want to create subclasses of <code>SC.Object</code>
rather than direct instances. In the above example, we created a new
<code>SC.Object</code> to represent a person, but it often makes more sense to
define a unique <code>Person</code> Class, and to create instances of it.  Doing
so allows us to define default properties on the Class and to include related
helper functions.  To do this, we simply call +extend()+ on
<code>SC.Object</code> as the next example shows.

```javascript
MyApp.Person = SC.Object.extend({
  firstName: null,
  lastName:  null,
  permissions: 'none',

  fullName: function() {
    return [this.get('firstName'), this.get('lastName')].compact().join(' ');
  }
});
```

After defining the <code>Person</code> Class, we can now create new
<code>Person</code> objects and each will contain the properties
<code>firstName</code>, <code>lastName</code> and <code>permissions</code> as
well as the simple <code>fullName()</code> function.  The following example
shows this.

```javascript
var person = MyApp.Person.create({
  firstName: 'Peter',
  lastName:  'Wagenet'
});

person.fullName(); // 'Peter Wagenet'
person.get('permissions'); // 'none'
```

##### Calling superclass methods with sc_super

In some cases when you subclass a Class you will want to augment a method of
the parent Class without completely overriding it. In this case, SproutCore
provides the +sc_super+ method which calls the original function. For those
familiar with Ruby's <code>super</code> method, <code>sc_super</code> is very
similar.  Here is an example of a subclass of <code>Person</code> that extends
and uses the superclass's <code>fullName()</code> method.

```javascript
// Define a new subclass of MyApp.Person
MyApp.FormalPerson = MyApp.Person.extend({
  title: null,

  fullName: function() {
    // Joins `title` with the result of `fullName()` on the superclass.
    return [this.get('title'), sc_super()].compact().join(' ');
  }
});

// Create a MyApp.FormalPerson object
var person = MyApp.FormalPerson.create({
  title:     'Mr.',
  firstName: 'Peter',
  lastName:  'Wagenet'
});

person.fullName(); // Mr. Peter Wagenet
person.get('permissions'); // 'none'
```

NOTE: +sc_super+ is one of the rare exceptions in SproutCore in that it is not
actually a JavaScript function. It's just a pre-processor directive that gets
replaced with <code>arguments.callee.base.apply(this, arguments)</code> by the
Build Tools.

##### The init method

Whenever an instance of an <code>SC.Object</code> is created, its +init()+
method is called first. This function can be overridden when you need to
perform additional setup each time one of your objects is created.  The next
example uses <code>init()</code> to ensure that a calculation is performed
each time a new MyApp.Calculation object is created.

```javascript
MyApp.Calculation = SC.Object.extend({
  input: null,
  result: null,

  _calculate: function() {
    // Do expensive calculation
    this.set('result', this.get('input') * 2);
  },

  init: function() {
    sc_super();  // Warning: Always invoke SC.Object's init() method!
    this._calculate();
  }
});

var calc = MyApp.Calculation.create({ input: 5 });
calc.get('result'); // 10
```

WARNING: When overriding the <code>init()</code> method it is important that
you call <code>sc_super</code> at the start of your custom <code>init()</code>
method. This will ensure that all internal object initialization takes place
as expected.

##### Using Mixins

Mixins are an easy way to extend multiple classes, that don't share an
inheritance tree, with similar functionality.  Mixins are simply a hash with a
series of properties that will be added to the objects you create.  The next
example defines the <code>MyApp.Introducable</code> mixin, which can then be
shared between many different Classes.

```javascript
MyApp.Introducable = {
  sayHello: function() {
    return 'Hello, my name is ' + this.name;
  }
};
```

To add one or more mixins to a Class, add them as parameters to extend.  For
example,

```javascript
MyApp.Person = SC.Object.extend(MyApp.Introducable, { name: ''; });

var person = MyApp.Person.create({ name: 'Bob' });
person.sayHello(); // Hello, my name is Bob
```

As you may have guessed, <code>SC.Object.extend</code> just takes a _series of
hashes_ and mixes them all in to a newly created class.

##### Class methods

You can also define Class methods on your custom Classes. If you need to add a
single Class method to a Class, you can do it in the traditional JavaScript
manner.  For example, the following adds a <code>quickCreate()</code> helper
function to <code>MyApp.Person</code>.

```javascript
MyApp.Person.quickCreate = function(firstName, lastName){
  return MyApp.Person.create({
    firstName: firstName,
    lastName: lastName
  });
};

var person = MyApp.Person.quickCreate('Peter', 'Wagenet');
person.fullName(); // Peter Wagenet
```

However, sometimes you may want to add a series of Class methods and
properties. In this case you can use the +mixin()+ method.

```javascript
MyApp.Person.mixin({
  quickCreate: function(firstName, lastName){
    return MyApp.Person.create({
      firstName: firstName,
      lastName: lastName
    });
  }),
});

person = MyApp.Person.quickCreate('Mary', 'Shelley');
person.fullName(); // Mary Shelley
```

Note that the <code>mixin()</code> method is different from the Mixins
described above. The <code>mixin()</code> method will add the properties and
methods within the block as _Class properties and methods_. Mixins themselves
add _instance variables and methods_.

### Changelog

* January 12, 2011: initial partial version by [Peter Wagenet](credits.html#pwagenet)
* January 19, 2011: further updates by [Peter Wagenet](credits.html#pwagenet)
* January 20, 2011: corrections to "The +init+ Method" and "The Run Loop" by [Peter Wagenet](credits.html#pwagenet)
* July 19, 2013: added "Changelog" by [Topher Fangio](credits.html#topherfangio)
* August 27, 2013: converted to Markdown format for DocPad guides by [deeDude](credits.html#deeDude)
