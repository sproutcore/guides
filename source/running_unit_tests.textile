h2. UnitTesting - Running Unit Tests

This guide covers ... After reading this guide, you will be able to:

* Make a list of the things you will cover
* This should be a relatively high level list
* It should cover what the reader will know how to do once done

endprologue.

h3. Using the SproutCore Test Runner

NOTE: The new Abbot tools do not currently support the test runner.  Until then you should follow the "Running Tests Manually" section below.

Usually the best way to run unit tests is to simply visit the built-in unit test runner at:

@http://localhost:4020/sproutcore/tests@

This will display a dialog with all of the applications and frameworks installed
in your project for which you can run unit tests.

!images/testing/sample_sc_test_screenshot.png!

Choose the target you want to test and the tests for that target will appear in
the left hand column.  You can select "All Tests" to load and run all of the
unit tests at once or you can choose individual tests to run just the test in
that file.

h4. Using Continuous Integration

Another way you can use the test runner is to turn on "continuous integration
mode".  This mode will continuously load and run all of the unit tests in your
chosen target.  If one or more of the unit tests fail, it will stop running the
tests and show an Alert dialog telling you that a test failed.

When you activate continuous integration mode, you can minimize the test runner
in your dock or task bar and start writing code like normal.  If you ever save a
file that breaks the unit tests, the test runner will notify within minutes of
saving the document.

h3. Loading Tests Manually

Sometimes you may want to run unit tests manually outside of the test runner.
This is particularly useful if you are trying to use the unit test runner with
an automated testing tool like Selenium.

All unit tests for an application or framework can be found at an easily computed
URL using the following format:

@http://localhost:4020/TARGET_NAME/LANGUAGE/current/tests/PATH/TO/TEST.html@

h4. Loading An Individual Unit Test File

For example, if you have a test file called at +tests/models/contact/fullName.js+
in a "contacts" application, you can load that unit test directly in your web
browser by visiting the URL:

@http://localhost:4020/contacts/en/current/tests/models/contact/fullName.html@

Note that the ".js" extension has been substituted for a ".html".  This tells
the web browser that you are loading a web page (which will contain the unit test),
not a JavaScript file.

h4. Loading All Unit Tests In a Directory

If you would like to run all of the unit tests in a directory, you can use the
same method described as above, but instead name the directory with an .html extension.
For example, to run all of the unit tests in the tests/models/contact directory, you could visit:

@http://localhost:4020/contacts/en/current/tests/models/contact.html@

Note that the HTML file loaded at this URL will contain all of your unit tests
files concatenated together in a single HTML page.  If your tests are not properly
isolated, they may interfere with one another when loaded this way, though this is rare.

h4. Loading All Unit Tests in a Target

Finally, If you would like to load all of the unit tests on your application or
framework, you can do that too.  Instead of naming a directory, just visit a URL
with the format described above but ending in tests.html.  For example, to load all
of the unit tests at once for your contact application you could visit:

@http://localhost:4020/contacts/en/current/tests.html@

Note that, like the combined directory tests above, this global test file will contain
all of your unit test files concatenated together in a single HTML page.  If your tests
are not properly isolated, they may interfere with one another, causing the unit tests
to pass when loaded individually but fail when they are loaded together.  This situation
is rare, but you should be careful to write your test files so that they will not clobber
one another at load time.

h4. Loading Tests from Nested Targets

If you use nested targets, you can load tests from them as well.
Just name your nested target like you name it in a config file.
example, the sproutcore framework contains a nested framework called "runtime".
You could load all of the unit tests for the sproutcore/runtime framework by visiting:

@http://localhost:4020/sproutcore/runtime/en/current/tests.html@

h3. What Is Included In a Unit Test

When you load a unit test file, SproutCore takes your source unit test JavaScript
and generates an HTML page.  But what goes into this page?

The best way to think about unit tests is that SproutCore basically loads your
regular application, including all dependencies, and then includes your unit test
as JavaScript at the end.  When the page loads, instead of calling your +main()+
function like it would normally do when loading your app, SproutCore instead runs
your unit tests.

The nice thing about this approach is it means you can run your unit tests in an
environment that is very close to the actual combination of code and resources that
will be available to your application when it runs.

It also means that if you write code that runs on page load BEFORE the +main()+ method
is called, it could be executed even in test mode.  Make sure that any code your write
to run at early page startup can deal with being loaded in test mode as well.

h3. Moving On

This concludes the main programming guide for working with Unit Tests in SproutCore
applications.  You're now ready to change the world with awesome unit tests!

If you are working on the SproutCore framework itself, there is one other section
you should look at.  The SproutCore Testing Guidelines will tell you the specific
testing procedures we use when writing code for SproutCore.  Even if you are not
hacking SproutCore itself, you should consider reading this section simply to
learn more about what procedures the SproutCore team considers best practice.

On to the "SproutCore Testing Guidelines Â»":/testing_guidelines.html
