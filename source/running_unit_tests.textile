h2. UnitTesting - Running Unit Tests

 After reading this guide, you will be able to:

* Understand how unit test files are loaded and executed
* Use the GUI Test Runner
* Manually run unit test(s)

endprologue.


h3. How Unit Test Cases Are Loaded and Executed

When you run a unit test, SproutCore retrieves and runs the source unit test JavaScript and renders the results as an HTML page.

SproutCore does this in the following sequence:

# Load the application including its dependencies.
# Load the unit tests.
# Instead of calling the main application's +main()+ function, runs all or some of the unit tests.
# Like most javascript test frameworks, SproutCore renders the results in a nicely-formatted HTML page.

The advantage is that your unit tests are run in an environment that is very close to the actual combination of code and resources that will be available to your application when it runs.

It also means that if you write code that runs on page load BEFORE the +main()+ method is called, it could be executed even in test mode.  Make sure that any code you write to run at early page startup can deal with being loaded in test mode as well.




h3. Using the SproutCore Test Runner

NOTE: The new Abbot tools do not yet support the test runner.  Until they do, you should follow the "Running Tests Manually" section below.

h4. Starting the Test Runner

The easiest way to run unit tests is to simply visit the built-in unit test runner by starting your browser and navigating to +http://localhost:4020+, then selecting +tests+ from the application list as shown.

!images/testing/unit_test_2.jpg(Test Runner)!

For quicker access, bookmark "http://localhost:4020/sproutcore/tests":http://localhost:4020/sproutcore/tests.


h4. Selecting and Running Tests

Suppose your application is named "my_app". To see a list of your unit tests, in the left hand column under +APPS+, double-click "my_app":

!images/testing/unit_test_3.png(Test Runner Unit Test Files)!

Run all the unit test cases within a file by clicking on it.


NOTE: The "+Using Continuous Integration+" checkbox and the "+Run Tests+" button are under construction.


h3. Running Selected Unit Tests

NOTE: The instructions in this section only apply to SproutCore revision level 1.5 and above.

h4. Running An Individual Unit Test File

Sometimes you may want to run unit tests manually outside of the test runner. For example, perhaps you have a continuous integration environment and would like to use Selenium to evaluate the results of running your unit tests.

All unit tests for an application or framework can be found at an easily computed URL using the following format:

@http://localhost:4020/sproutcore/tests#APP_NAME&test=PARTIAL_PATH_TO_APP@

where:

* APP_NAME is your application name.
* PARTIAL_PATH_TO_APP is the subpath from the +PROJECT_FOLDER/apps/APP_NAME/tests+ folder.  It should include the body of the javascript file name but not the +.js+ extension.

As an example, suppose you have a unit test file located at:

@PROJECT_HOME/apps/my_app/tests/unit/sample.js@

To run this test, browse:

@http://localhost:4020/sproutcore/tests#my_app&test=unit/sample@

h4. Loading All Unit Tests In a Directory

NOTE: Under Construction

h4. Loading All Unit Tests in a Target

NOTE: Under Construction

h4. Loading Tests from Nested Targets

NOTE: Under Construction

h3. Moving On

This concludes the main programming guide for working with Unit Tests in SproutCore applications.  You're now ready to change the world with awesome unit tests!

On to the "SproutCore Testing Guidelines Â»":/testing_guidelines.html


