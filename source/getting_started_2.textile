h2. Getting Started: Part 2

After reading this guide you will be able to:

* Define your models using SC.Record.
* Manage your models using SC.Store.
* Load data into the store from fixture data.
* Query your models using SC.Query.

endprologue.

h3. Prepare the Application

In the "first part of this guide":getting_started.html, you learned how to build a basic Todos application. You now know how to define your models, views, and controllers, then describe how they interact via bindings. So far, however, you have had no way to persist the information between page refreshes.

The best way to change that is to use SproutCore's Data Store framework to manage records. An instance of +SC.Store+ is responsible for managing the lifecycle of your records. Behind the scenes, the store uses an +SC.DataSource+ to translate retrieve data from your server and persist changes back.

If you still have your Todos app from Part 1, use that. If not, you can get a "completed version from GitHub":https://www.github.com/sproutcore/Todos-Example.

Now that we'll be using the Data Store, we need to tell SproutCore to include it when your run your application. You can add this dependency in the Buildfile. Just change +config+ line to:

<ruby filename="Buildfile">
config :all,¬
  :required => ["sproutcore/core_foundation", "sproutcore/datastore"], ¬
  :theme => "sproutcore/empty_theme"
</ruby>

h3. Defining the Model

The first thing that we need to modify in code is +Todos.Todo+. Currently it's just a subclass of +SC.Object+. Let's change it to +SC.Record+:

<javascript filename="apps/todos/todos.js">
Todos.Todo = SC.Record.extend({
  title: SC.Record.attr(String),
  isDone: SC.Record.attr(Boolean, { defaultValue: NO })
});
</javascript>

Now we are subclassing +SC.Record+ instead of +SC.Object+. We also add attributes definitions: +title+ always gets converted to a +String+, and +isDone+ becomes a +Boolean+. Additionally +isDone+ will default to +NO+ if you don't provide a different value when creating a new record. If you want to read more about how records work, check out the "records guide":records.html.

h3. Creating Fixture Data

The easiest way to start development without having to connect to a backend server is to use fixtures. With fixtures, we provide an array of data hashes that represent each record. Let's create a few fixtures below the record definition:

<javascript filename="apps/todos/todos.js">
Todos.Todo.FIXTURES = [

    { "guid": "todo-1",
      "title": "Build my first SproutCore app",
      "isDone": false },

    { "guid": "todo-2",
      "title": "Build a really awesome SproutCore app",
      "isDone": false },

    { "guid": "todo-3",
      "title": "Next, the world!",
      "isDone": false }
];
</javascript>

Now we have a model and some sample data, but if you run the application, nothing happens. What's wrong?

Remember that an instance of +SC.Store+ is responsible for loading records, and that includes fixture data. We will also need to tell the controller exactly which data we want to fetch from that store. Let's start by adding a store to +Todos+ application:

<javascript filename="apps/todos/todos.js">
// add store property to previously created Todos object
Todos = SC.Application.create({
  store: SC.Store.create().from(SC.Record.fixtures)
});
</javascript>

We just created a new +SC.Store+ and told it to load its data from the fixtures we previously defined. Later in the development cycle, when you want to connect your application to a real server, you can just change the argument
of the +from()+ method to something like +"MyDataSource"+.

Let's make sure that everything is working. If you haven't already, run +sc-server+ from your application directory, then open "http://localhost:4020/todos":http://localhost:4020/todos in your web browser. Open your browser's JavaScript console and type the following commands:

<javascript>
records = Todos.store.find(Todos.Todo)
records.objectAt(0).get('title')
// => "Build my first SproutCore app"
</javascript>

We just used the store's +find()+ method to return all records of a certain type. This will return an instance of +SC.RecordArray+ that contains all of <code>Todos.Todo</code> records the store knows about. If you create a new <code>Todo</code> record in the future, it will automatically be added to the record array. Conversely, if you were to ever destroy one of your <code>Todo</code> objects, it would be automatically removed.

h3. Connecting the Pieces

Now you're ready to bind your controller to the store. In order to do that, you'll need to set +content+ property of +Todos.todoListController+ to a record array that you will fetch with +SC.Store.find()+ function. You can do it in the +SC.ready+ callback, which is already defined at the end of your <code>todos.js</code> file:

<javascript filename="apps/todos/todos.js">
SC.ready(function() {
  Todos.mainPane = SC.TemplatePane.append({
    layerId: 'todos',
    templateName: 'todos'
  });

  var todos = Todos.store.find(Todos.Todo);
  Todos.todoListController.set('content', todos);
});
</javascript>

Now refresh the page and you should see that all of the todos from fixtures are displayed in the view.

The last piece is making sure that the store knows about new records. Update the controller's +createTodo+ method to use <code>SC.Store</code>'s +createRecord+ method:

<javascript filename="apps/todos/todos.js">
  createTodo: function(title) {
    Todos.store.createRecord(Todos.Todo, { title: title });
  },
</javascript>

Try reloading a page and adding a new todo. It should automatically place new one at the bottom of the list. All of the other operations that you perform on records should also work seamlessly, because we use standard +get()+ and +set()+ functions that work for every type of objects in SproutCore.

h3. Changelog

* May 5, 2011: initial version by "Piotr Sarnacki":credits.html#drogus
* May 9, 2011: Stylistic edits by "Tom Dale":credits.html#tomdale
